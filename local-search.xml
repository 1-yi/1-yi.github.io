<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>最小移动总距离</title>
    <link href="/2022/11/07/%E6%9C%80%E5%B0%8F%E7%A7%BB%E5%8A%A8%E6%80%BB%E8%B7%9D%E7%A6%BB/"/>
    <url>/2022/11/07/%E6%9C%80%E5%B0%8F%E7%A7%BB%E5%8A%A8%E6%80%BB%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>##题目  </p><p><a href="https://leetcode.cn/problems/minimum-total-distance-traveled/description/">https://leetcode.cn/problems/minimum-total-distance-traveled/description/</a></p><p>X 轴上有一些机器人和工厂。给你一个整数数组 <code>robot</code> ，其中 <code>robot[i]</code> 是第 <code>i</code> 个机器人的位置。再给你一个二维整数数组 <code>factory</code> ，其中 <code>factory[j] = [positionj, limitj]</code> ，表示第 <code>j</code> 个工厂的位置在 <code>positionj</code> ，且第 <code>j</code> 个工厂最多可以修理 <code>limitj</code> 个机器人。</p><p>每个机器人所在的位置 <strong>互不相同</strong> 。每个工厂所在的位置也 <strong>互不相同</strong> 。注意一个机器人可能一开始跟一个工厂在 <strong>相同的位置</strong> 。</p><p>所有机器人一开始都是坏的，他们会沿着设定的方向一直移动。设定的方向要么是 X 轴的正方向，要么是 X 轴的负方向。当一个机器人经过一个没达到上限的工厂时，这个工厂会维修这个机器人，且机器人停止移动。</p><p><strong>任何时刻</strong>，你都可以设置 <strong>部分</strong> 机器人的移动方向。你的目标是最小化所有机器人总的移动距离。</p><p>请你返回所有机器人移动的最小总距离。测试数据保证所有机器人都可以被维修。</p><p><strong>注意：</strong></p><ul><li>所有机器人移动速度相同。</li><li>如果两个机器人移动方向相同，它们永远不会碰撞。</li><li>如果两个机器人迎面相遇，它们也不会碰撞，它们彼此之间会擦肩而过。</li><li>如果一个机器人经过了一个已经达到上限的工厂，机器人会当作工厂不存在，继续移动。</li><li>机器人从位置 <code>x</code> 到位置 <code>y</code> 的移动距离为 <code>|y - x|</code> 。</li></ul><p><strong>提示：</strong></p><ul><li><code>1 &lt;= robot.length, factory.length &lt;= 100</code></li><li><code>factory[j].length == 2</code></li><li><code>-109 &lt;= robot[i], positionj &lt;= 109</code></li><li><code>0 &lt;= limitj &lt;= robot.length</code></li><li>测试数据保证所有机器人都可以被维修。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：robot = [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>], factory = <span class="hljs-string">[[2,2],[6,2]]</span><br>输出：<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：robot = [<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>], factory = <span class="hljs-string">[[-2,1],[2,1]]</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>##题解</p><p>设最优方案中，机器人 <code>i</code> 被送去工厂 <code>Ti</code> ，存在最优方案，使得<code>Ti</code>是不严格单调递增的。</p><p>定义 <code>dp[i][j] </code>表示前 <code>i</code>个工厂修复前 <code>j</code> 个机器人的最小移动总距离。考虑去最后一个工厂的机器人有多少个，可以得到动态规划转移方程：</p><p>$$<br>d p[i][j]&#x3D;\min <em>{k&#x3D;0}^{\min \left(\text { limiti }</em>{i} j\right)}\left(d p[i-1][j-k]+\sum_{l&#x3D;0}^{k-1} \mid \operatorname{robot}[j-l]-\text { position }_{i} \mid\right)<br>$$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">minimumTotalDistance</span><span class="hljs-params">(List&lt;Integer&gt; robot, <span class="hljs-type">int</span>[][] factory)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> robot.size();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> factory.length;<br>        Collections.sort(robot);<br>        Arrays.sort(factory);<br>        <span class="hljs-type">long</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[m + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//不能完全匹配</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0x3f3f3f3f3f3f3f3fL</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n ; j++)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> factory[j-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">lim</span> <span class="hljs-operator">=</span> factory[j-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>                dp[i][j] = dp[i][j-<span class="hljs-number">1</span>];<br>                <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">//累加减少一次遍历</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i; k &gt;= Math.max(<span class="hljs-number">1</span> , i - lim + <span class="hljs-number">1</span>); k--)&#123;<br>                    sum += Math.abs(pos-robot.get(k - <span class="hljs-number">1</span>));<br>                    dp[i][j] = Math.min(dp[i][j], dp[k - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + sum);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
